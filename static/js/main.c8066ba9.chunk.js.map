{"version":3,"sources":["components/shared/WKNavbar.js","components/shared/Head.js","components/shared/Foot.js","components/shared/waiting.js","App.js","serviceWorker.js","index.js"],"names":["WKNavbar","Navbar","className","bg","expand","Brand","href","style","textDecoration","Toggle","aria-controls","Collapse","id","Nav","Link","as","to","Head","date","Date","Foot","Container","fluid","fontSize","color","getFullYear","toDateString","toTimeString","Waiting","Path","props","fallback","minHeight","Spinner","animation","role","Home","lazy","Bio","Cv","Asf","Aff","News","Pub","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAGe,SAASA,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQC,UAAU,aAAaC,GAAG,QAAQC,OAAO,MAC/C,kBAACH,EAAA,EAAOI,MAAR,CACEC,KAAK,IACLJ,UAAU,YACVK,MAAO,CAAEC,eAAgB,SAH3B,MAOA,kBAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,mBAAmBR,UAAU,aAC1D,kBAACD,EAAA,EAAOU,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKX,UAAU,WACb,kBAACW,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,QAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,cAAvB,aAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,OAAvB,MAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,iBAAvB,gBAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,iBAAvB,gBAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,eAAvB,cAGA,kBAACH,EAAA,EAAIC,KAAL,CAAUR,KAAK,8BAAf,aACA,kBAACO,EAAA,EAAIC,KAAL,CAAUC,GAAID,IAAME,GAAG,8BAAvB,gCClCH,IAAMC,EAAO,kBAAM,4BAAQL,GAAG,YACnC,+C,QCAIM,EAAO,IAAIC,KACJC,EAAO,kBAClB,4BAAQR,GAAG,cAAcV,UAAU,QACjC,kBAACmB,EAAA,EAAD,CAAWC,OAAK,EAACpB,UAAU,WACzB,uBAAGA,UAAU,eACX,uBACEA,UAAU,iCACVI,KAAK,6CAEL,uBAAGJ,UAAU,gCACb,0BAAMA,UAAU,WAAhB,mBAEF,uBACEA,UAAU,iCACVI,KAAK,8DAEL,uBAAGJ,UAAU,sCACb,0BAAMA,UAAU,WAAhB,sBAGJ,uBAAGA,UAAU,cAAcK,MAAO,CAAEgB,SAAU,UAA9C,qDAEE,6BAFF,0DAIE,8BAEF,uBAAGrB,UAAU,eACV,gBACD,uBACEK,MAAO,CAAEiB,MAAO,OAAQhB,eAAgB,aACxCF,KAAK,8BAFP,iBAMC,KAAOY,EAAKO,cAAgB,kBAC7B,uBACElB,MAAO,CAAEiB,MAAO,OAAQhB,eAAgB,aACxCF,KAAK,gCAFP,iBAMC,KAAOY,EAAKO,cACb,6BACC,kBAAoBP,EAAKQ,eAAiB,IAAMR,EAAKS,mB,gBC3CvD,SAASC,EAAQC,GACtB,OAAO,SAAAC,GAAK,OACV,kBAAC,WAAD,CACEC,SACE,yBACE7B,UAAU,mDACVK,MAAO,CAAEyB,UAAW,SAEpB,kBAACC,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMjC,UAAU,WAAhB,iBAKN,kBAAC2B,EAAD,Q,YCCAO,EAAOC,gBAAK,kBAAM,+DAClBC,EAAMD,gBAAK,kBAAM,+DACjBE,EAAKF,gBAAK,kBAAM,8DAChBG,EAAMH,gBAAK,kBAAM,+DACjBI,EAAMJ,gBAAK,kBAAM,+DACjBK,EAAOL,gBAAK,kBAAM,qEAClBM,EAAMN,gBAAK,kBAAM,8DAsCRO,MArCf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACA,yBAAK1C,UAAU,OACb,kBAAC,EAAD,MACA,kBAACF,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,KAAK,6BAA6BC,UAAWlB,EAAQY,KAC5D,kBAAC,IAAD,CACEK,KAAK,gCACLC,UAAWlB,EAAQc,KAErB,kBAAC,IAAD,CAAOG,KAAK,wBAAwBC,UAAWlB,EAAQc,KACvD,kBAAC,IAAD,CAAOK,OAAK,EAACF,KAAK,kBAAkBC,UAAWlB,EAAQc,IACrD,kBAAC,IAAD,CAAU1B,GAAG,iBAEf,kBAAC,IAAD,CAAO+B,OAAK,EAACF,KAAK,cAAcC,UAAWlB,EAAQc,KACnD,kBAAC,IAAD,CAAOG,KAAK,gBAAgBC,UAAWlB,EAAQa,KAC/C,kBAAC,IAAD,CAAOI,KAAK,yBAAyBC,UAAWlB,EAAQe,KACxD,kBAAC,IAAD,CAAOE,KAAK,oBAAoBC,UAAWlB,EAAQe,KACnD,kBAAC,IAAD,CAAOE,KAAK,gBAAgBC,UAAWlB,EAAQe,KAC/C,kBAAC,IAAD,CAAOE,KAAK,UAAUC,UAAWlB,EAAQW,KACzC,kBAAC,IAAD,CAAOQ,OAAK,EAACF,KAAK,MAAMC,UAAWlB,EAAQW,KAC3C,kBAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWlB,EAAQU,KAC5C,kBAAC,IAAD,CAAOO,KAAK,IAAIC,UAAWlB,EAAQQ,KACnC,kBAAC,IAAD,CAAOU,UAAWlB,EAAQQ,OAG9B,kBAAC,EAAD,UC1CYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c8066ba9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Nav, Navbar } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function WKNavbar() {\r\n  return (\r\n    <Navbar className=\"sticky-top\" bg=\"white\" expand=\"lg\">\r\n      <Navbar.Brand\r\n        href=\"/\"\r\n        className=\"d-lg-none\"\r\n        style={{ textDecoration: \"none\" }}\r\n      >\r\n        WK\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"border-0\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mx-auto\">\r\n          <Nav.Link as={Link} to=\"/\">\r\n            Home\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to=\"/biography\">\r\n            Biography\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to=\"/cv\">\r\n            CV\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to=\"/publications\">\r\n            Publications\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to=\"/affiliations\">\r\n            Affiliations\r\n          </Nav.Link>\r\n          <Nav.Link as={Link} to=\"/newsletter\">\r\n            Newsletter\r\n          </Nav.Link>\r\n          <Nav.Link href=\"https://www.queensu.ca/mcp\">MCP Index</Nav.Link>\r\n          <Nav.Link as={Link} to=\"/animal-studies-fellowship\">\r\n            Animal Studies Fellowship\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport const Head = () => <header id=\"page-top\">\r\n  <h1>Will Kymlicka</h1>\r\n</header>;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nconst date = new Date();\r\nexport const Foot = () => (\r\n  <footer id=\"page-bottom\" className=\"px-4\">\r\n    <Container fluid className=\"mx-auto\">\r\n      <p className=\"text-center\">\r\n        <a\r\n          className=\"text-white mx-1 d-inline-block\"\r\n          href=\"http://queensu.academia.edu/WillKymlicka/\"\r\n        >\r\n          <i className=\"ai ai-academia-square ai-5x\"></i>\r\n          <span className=\"sr-only\">(Academia.edu)</span>\r\n        </a>\r\n        <a\r\n          className=\"text-white mx-1 d-inline-block\"\r\n          href=\"http://scholar.google.ca/citations?hl=en&amp;user=AoKsdeAAAAAJ\"\r\n        >\r\n          <i className=\"ai ai-google-scholar-square ai-5x\"></i>\r\n          <span className=\"sr-only\">(Google Scholar)</span>\r\n        </a>\r\n      </p>\r\n      <p className=\"text-center\" style={{ fontSize: \"1.2em\" }}>\r\n        Department of Philosophy | Watson Hall Office #313\r\n        <br />\r\n        Queen's University | Kingston, Ontario, Canada, K7L 3N6\r\n        <br />\r\n      </p>\r\n      <p className=\"text-center\">\r\n        {\"Content © \"}\r\n        <a\r\n          style={{ color: \"#fff\", textDecoration: \"underline\" }}\r\n          href=\"mailto:kymlicka@queensu.ca\"\r\n        >\r\n          Will Kymlicka\r\n        </a>\r\n        {\", \" + date.getFullYear() + \" | Design © \"}\r\n        <a\r\n          style={{ color: \"#fff\", textDecoration: \"underline\" }}\r\n          href=\"https://www.torindoppelt.com\"\r\n        >\r\n          Torin Doppelt\r\n        </a>\r\n        {\", \" + date.getFullYear()}\r\n        <br />\r\n        {\"Last modified: \" + date.toDateString() + \" \" + date.toTimeString()}\r\n      </p>\r\n    </Container>\r\n  </footer>\r\n);\r\n","import React, { Suspense } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nexport function Waiting(Path) {\r\n  return props => (\r\n    <Suspense\r\n      fallback={\r\n        <div\r\n          className=\"d-flex justify-content-center align-items-center\"\r\n          style={{ minHeight: \"80vh\" }}\r\n        >\r\n          <Spinner animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </div>\r\n      }\r\n    >\r\n      <Path />\r\n    </Suspense>\r\n  );\r\n}\r\n","import React, { lazy } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"academicons\";\nimport \"./css/main.css\";\nimport \"./css/style.scss\";\nimport \"./css/fonts.css\";\nimport WKNavbar from \"./components/shared/WKNavbar\";\nimport { Head } from \"./components/shared/Head\";\nimport { Foot } from \"./components/shared/Foot\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport { Waiting } from \"./components/shared/waiting\";\nimport { HelmetProvider } from \"react-helmet-async\";\nconst Home = lazy(() => import(\"./pages/Home\"));\nconst Bio = lazy(() => import(\"./pages/Bio\"));\nconst Cv = lazy(() => import(\"./pages/Cv\"));\nconst Asf = lazy(() => import(\"./pages/Asf\"));\nconst Aff = lazy(() => import(\"./pages/Aff\"));\nconst News = lazy(() => import(\"./pages/News\"));\nconst Pub = lazy(() => import(\"./pages/Pub\"));\nfunction App() {\n  return (\n    <Router>\n      <HelmetProvider>\n      <div className=\"App\">\n        <Head />\n        <WKNavbar />\n        <main>\n          <Switch>\n            <Route path=\"/animal-studies-fellowship\" component={Waiting(Asf)} />\n            <Route\n              path=\"/newsletter/:no/:year/:month/\"\n              component={Waiting(News)}\n            />\n            <Route path=\"/newsletter/:no/:year\" component={Waiting(News)} />\n            <Route exact path=\"/newsletter/:no\" component={Waiting(News)}>\n              <Redirect to=\"/newsletter\" />\n            </Route>\n            <Route exact path=\"/newsletter\" component={Waiting(News)} />\n            <Route path=\"/affiliations\" component={Waiting(Aff)} />\n            <Route path=\"/publications/:id/:sub\" component={Waiting(Pub)} />\n            <Route path=\"/publications/:id\" component={Waiting(Pub)} />\n            <Route path=\"/publications\" component={Waiting(Pub)} />\n            <Route path=\"/cv/:id\" component={Waiting(Cv)} />\n            <Route exact path=\"/cv\" component={Waiting(Cv)} />\n            <Route path=\"/biography\" component={Waiting(Bio)} />\n            <Route path=\"/\" component={Waiting(Home)} />\n            <Route component={Waiting(Home)} />\n          </Switch>\n        </main>\n        <Foot />\n      </div>\n      </HelmetProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}